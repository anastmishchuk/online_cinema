"""Payment model implemented

Revision ID: 3aa6aea84a92
Revises: 8137eaada176
Create Date: 2025-06-20 12:39:05.775605

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3aa6aea84a92'
down_revision: Union[str, None] = '8137eaada176'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('movies_certification_id_fkey', 'movies', type_='foreignkey')
    op.drop_table('certifications')
    op.drop_table('activation_tokens')
    op.drop_table('likes')
    op.drop_index(op.f('ix_genres_id'), table_name='genres')
    op.drop_table('genres')
    op.drop_table('movie_stars')
    op.drop_index(op.f('ix_movies_id'), table_name='movies')
    op.drop_table('movies')
    op.drop_index(op.f('ix_directors_id'), table_name='directors')
    op.drop_table('directors')
    op.drop_index(op.f('ix_user_groups_id'), table_name='user_groups')
    op.drop_table('user_groups')
    op.drop_table('user_profiles')
    op.drop_table('movie_genres')
    op.drop_table('password_reset_tokens')
    op.drop_table('favorite_movies')
    op.drop_table('comments')
    op.drop_index(op.f('ix_cart_items_id'), table_name='cart_items')
    op.drop_table('cart_items')
    op.drop_index(op.f('ix_movie_ratings_id'), table_name='movie_ratings')
    op.drop_table('movie_ratings')
    op.drop_index(op.f('ix_carts_id'), table_name='carts')
    op.drop_table('carts')
    op.drop_index(op.f('ix_purchased_movies_id'), table_name='purchased_movies')
    op.drop_table('purchased_movies')
    op.drop_table('movie_directors')
    op.drop_index(op.f('ix_stars_id'), table_name='stars')
    op.drop_table('stars')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_table('refresh_tokens')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('refresh_tokens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('refresh_tokens_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('refresh_tokens_pkey')),
    sa.UniqueConstraint('token', name=op.f('refresh_tokens_token_key'))
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['user_groups.id'], name='users_group_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('stars',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('stars_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='stars_pkey'),
    sa.UniqueConstraint('name', name='stars_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_stars_id'), 'stars', ['id'], unique=False)
    op.create_table('movie_directors',
    sa.Column('movie_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('director_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['director_id'], ['directors.id'], name=op.f('movie_directors_director_id_fkey')),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], name=op.f('movie_directors_movie_id_fkey')),
    sa.PrimaryKeyConstraint('movie_id', 'director_id', name=op.f('movie_directors_pkey'))
    )
    op.create_table('purchased_movies',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('movie_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('purchased_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], name=op.f('purchased_movies_movie_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('purchased_movies_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('purchased_movies_pkey')),
    sa.UniqueConstraint('user_id', 'movie_id', name=op.f('uix_user_movie_purchase'))
    )
    op.create_index(op.f('ix_purchased_movies_id'), 'purchased_movies', ['id'], unique=False)
    op.create_table('carts',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('carts_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='carts_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='carts_pkey'),
    sa.UniqueConstraint('user_id', name='carts_user_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_carts_id'), 'carts', ['id'], unique=False)
    op.create_table('movie_ratings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('movie_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], name=op.f('movie_ratings_movie_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('movie_ratings_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('movie_ratings_pkey')),
    sa.UniqueConstraint('user_id', 'movie_id', name=op.f('user_movie_unique'))
    )
    op.create_index(op.f('ix_movie_ratings_id'), 'movie_ratings', ['id'], unique=False)
    op.create_table('cart_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('cart_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('movie_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('added_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['cart_id'], ['carts.id'], name=op.f('cart_items_cart_id_fkey')),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], name=op.f('cart_items_movie_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('cart_items_pkey')),
    sa.UniqueConstraint('cart_id', 'movie_id', name=op.f('uix_cart_movie'))
    )
    op.create_index(op.f('ix_cart_items_id'), 'cart_items', ['id'], unique=False)
    op.create_table('comments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('movie_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], name=op.f('comments_movie_id_fkey')),
    sa.ForeignKeyConstraint(['parent_id'], ['comments.id'], name=op.f('comments_parent_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('comments_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('comments_pkey'))
    )
    op.create_table('favorite_movies',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('movie_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], name=op.f('favorite_movies_movie_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('favorite_movies_user_id_fkey')),
    sa.PrimaryKeyConstraint('user_id', 'movie_id', name=op.f('favorite_movies_pkey'))
    )
    op.create_table('password_reset_tokens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('password_reset_tokens_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('password_reset_tokens_pkey')),
    sa.UniqueConstraint('token', name=op.f('password_reset_tokens_token_key')),
    sa.UniqueConstraint('user_id', name=op.f('password_reset_tokens_user_id_key'))
    )
    op.create_table('movie_genres',
    sa.Column('movie_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('genre_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.id'], name=op.f('movie_genres_genre_id_fkey')),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], name=op.f('movie_genres_movie_id_fkey')),
    sa.PrimaryKeyConstraint('movie_id', 'genre_id', name=op.f('movie_genres_pkey'))
    )
    op.create_table('user_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('avatar', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('date_of_birth', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('info', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_profiles_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_profiles_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('user_profiles_user_id_key'))
    )
    op.create_table('user_groups',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_groups_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', postgresql.ENUM('USER', 'MODERATOR', 'ADMIN', name='usergroupenum'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='user_groups_pkey'),
    sa.UniqueConstraint('name', name='user_groups_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_user_groups_id'), 'user_groups', ['id'], unique=False)
    op.create_table('directors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('directors_pkey')),
    sa.UniqueConstraint('name', name=op.f('directors_name_key'))
    )
    op.create_index(op.f('ix_directors_id'), 'directors', ['id'], unique=False)
    op.create_table('movies',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('movies_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('time', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('imdb', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('votes', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('meta_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('gross', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('certification_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['certification_id'], ['certifications.id'], name='movies_certification_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='movies_pkey'),
    sa.UniqueConstraint('name', 'year', 'time', name='uq_movie_name_year_time'),
    sa.UniqueConstraint('uuid', name='movies_uuid_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_movies_id'), 'movies', ['id'], unique=False)
    op.create_table('movie_stars',
    sa.Column('movie_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('star_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.id'], name=op.f('movie_stars_movie_id_fkey')),
    sa.ForeignKeyConstraint(['star_id'], ['stars.id'], name=op.f('movie_stars_star_id_fkey')),
    sa.PrimaryKeyConstraint('movie_id', 'star_id', name=op.f('movie_stars_pkey'))
    )
    op.create_table('genres',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('genres_pkey')),
    sa.UniqueConstraint('name', name=op.f('genres_name_key'))
    )
    op.create_index(op.f('ix_genres_id'), 'genres', ['id'], unique=False)
    op.create_table('likes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('target_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('target_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_like', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('likes_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('likes_pkey')),
    sa.UniqueConstraint('user_id', 'target_type', 'target_id', name=op.f('uix_user_target'))
    )
    op.create_table('activation_tokens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('activation_tokens_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('activation_tokens_pkey')),
    sa.UniqueConstraint('token', name=op.f('activation_tokens_token_key')),
    sa.UniqueConstraint('user_id', name=op.f('activation_tokens_user_id_key'))
    )
    op.create_table('certifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('certifications_pkey')),
    sa.UniqueConstraint('name', name=op.f('certifications_name_key'))
    )
    op.create_index(op.f('ix_certifications_id'), 'certifications', ['id'], unique=False)
    # ### end Alembic commands ###
